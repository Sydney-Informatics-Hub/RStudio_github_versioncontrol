[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Getting started with Git in RStudio: a hands-on guide",
    "section": "",
    "text": "This Masterclass is an opportunity for you to bring your own laptop and R project, and learn how to use Git and RStudio together for version control and collaboration.\nWe will provide hands-on assistance in getting Git and RStudio to communicate effectively.\nThis Masterclass will highlight the importance of making collaboration transparent for everyone, as well as the benefits of using version control to maintain a clear and comprehensive record of project development.\nWe will provide you with the tools and knowledge you need to collaborate more efficiently and keep your projects organized and reproducible.\nThe following points will be discussed during the course of the master-class\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "index.html#trainers",
    "href": "index.html#trainers",
    "title": "Course title",
    "section": "Trainers",
    "text": "Trainers\n\nNathaniel (Nate) Butterworth (PhD Computational Geophysics), nathaniel.butterworth@sydney.edu.au\nDarya Vanichkina (PhD Bioinformatics, SFHEA)\nKristian Maras (MSc Quant Fin)"
  },
  {
    "objectID": "index.html#course-pre-requisites-and-setup-requirements",
    "href": "index.html#course-pre-requisites-and-setup-requirements",
    "title": "Course title",
    "section": "Course pre-requisites and setup requirements",
    "text": "Course pre-requisites and setup requirements\nNo previous programming experience is required, but Session 1 is a pre-requisite for the other sessions. Training will be delivered online, so you will need access to a modern computer with a stable internet connection and around 5GB of storage space for data downloaded prior to the course. Participants are encouraged to setup a Python environment on their local computer (as per the Setup Instructions provided), but participation using other platforms/environments can be supported where necessary."
  },
  {
    "objectID": "index.html#venue-online-via-zoom",
    "href": "index.html#venue-online-via-zoom",
    "title": "Course title",
    "section": "Venue, online via Zoom",
    "text": "Venue, online via Zoom\nParticipants will be provided with a Zoom link. Trainers will be broadcasting from Sydney.\n\nZoom etiquette and how we interact\nSessions will be recorded for attendees only, and it is set up to only record the host shared screen and host audio. We will try and get these uploaded to this site as soon as possible. Please interrupt whenever you want! Ideally, have your camera on and interact as much as possible. There will be someone monitoring the chat-window with any questions you would like to post there. Four hours is a long Zoom session so we have plenty of scheduled breaks combined with a mix of content to be delivered as demos, plus sections as independent exercises, but most of the course will be pretty-hands on with everyone writing their own code. We will use Zoom break-out rooms as needed with the Trainers and participants."
  },
  {
    "objectID": "index.html#code-of-conduct",
    "href": "index.html#code-of-conduct",
    "title": "Course title",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nWe expect all attendees of our training to follow our code of conduct, including bullying, harassment and discrimination prevention policies.\nIn order to foster a positive and professional learning environment we encourage the following kinds of behaviours at all our events and on our platforms:\n\nUse welcoming and inclusive language\nBe respectful of different viewpoints and experiences\nGracefully accept constructive criticism\nFocus on what is best for the community\nShow courtesy and respect towards other community members\n\nOur full CoC, with incident reporting guidelines, is available [here]https://sydney-informatics-hub.github.io/codeofconduct/)."
  },
  {
    "objectID": "index.html#general-session-timings",
    "href": "index.html#general-session-timings",
    "title": "Course title",
    "section": "General session timings",
    "text": "General session timings\n\n…"
  },
  {
    "objectID": "index.html#setup-instructions",
    "href": "index.html#setup-instructions",
    "title": "Course title",
    "section": "Setup Instructions",
    "text": "Setup Instructions\nPlease complete the Setup Instructions before the course.\nIf you have any trouble, please get in contact with us ASAP."
  },
  {
    "objectID": "setup.html",
    "href": "setup.html",
    "title": "Setup",
    "section": "",
    "text": "1. Get a client\nThese are the setup instructions…\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/01a-fundamentals.html",
    "href": "notebooks/01a-fundamentals.html",
    "title": "Sydney Informatics Hub Course name",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/01c_exampleMDcontent.html",
    "href": "notebooks/01c_exampleMDcontent.html",
    "title": "Sydney Informatics Hub Course name",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/01b_exampleRcontent.html",
    "href": "notebooks/01b_exampleRcontent.html",
    "title": "",
    "section": "",
    "text": "Sample R lesson\n\nQuestions\n\nWhat can R do?\nHow do I do it?\n\n\n\nObjectives\n\nLearn the basic R commands\n\n\n\n# if using VSCode may been\n#install.packages(\"languageserver\")\nhist(mtcars$mpg)\n\n\n\n\n\nChallenge\nWrite a function to convert map scale. For example, on a 1:25,000 map (good for hiking!) the distance between two points is 15 cm. How far apart are these in real life? (3750 m).\n[Reminder: 15 cm * 25000 = 375000 cm = 3750 m]\nYour function should take as input two numbers: the distance on the map (in cm) and the second number of the scale and, i.e. calculate_distance(15, 25000) should return 375000\n\n\nSolution\n\n#Declare the name of the function\n# this is not a R example - but you get the idea!\ndef calculate_distance(distance_cm,scale):\n    '''calculates distance based on map and scale\n    returns: z\n    inputs: distance_cm,scale\n    distance_cm and scale are two integers\n    returns the product of distance_cm and scale\n    '''  \n    \n    return(distance_cm * scale)\n\n\n\nKey points\n\nYou can store things in R in variables\nLists can be used to store objects of different types\nLoops with for can be used to iterate over each object in a list\nFunctions are used to write (and debug) repetitive code once\nIndexing\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "index.html#target-audience",
    "href": "index.html#target-audience",
    "title": "Getting started with Git in RStudio: a hands-on guide",
    "section": "Target audience",
    "text": "Target audience\nThis masterclass is suitable for people who use R for data analysis and are keen to gain a basic understanding of how to use RStudio in backing up a project containing Rmarkdown files on a github server."
  },
  {
    "objectID": "index.html#how-to-navigate-the-webpages",
    "href": "index.html#how-to-navigate-the-webpages",
    "title": "Getting started with Git in RStudio: a hands-on guide",
    "section": "How to navigate the webpages",
    "text": "How to navigate the webpages\n\nPlease use the Menu bar to move between lessons. The submenus from main menu option Set-up can be used to install the pre-requisites.\n\nThe topics under the menu Git for version control touch on the individual steps which we will follow in todays code-along session.\nEach main menu header has sub-header which will be visible when you click on the main-menu, as shown below."
  },
  {
    "objectID": "index.html#follow-on-courses",
    "href": "index.html#follow-on-courses",
    "title": "Getting started with Git in RStudio: a hands-on guide",
    "section": "Follow-on courses",
    "text": "Follow-on courses"
  },
  {
    "objectID": "index.html#course-survey",
    "href": "index.html#course-survey",
    "title": "Getting started with Git in RStudio: a hands-on guide",
    "section": "Course survey!",
    "text": "Course survey!\nPlease fill out our course survey before you leave! Help us help you!"
  },
  {
    "objectID": "index.html#credits",
    "href": "index.html#credits",
    "title": "Getting started with Git in RStudio: a hands-on guide",
    "section": "Credits",
    "text": "Credits\nThis masterclass is developed by the Sydney Informatics Hub, University of Sydney."
  },
  {
    "objectID": "CHEATSHEET.html",
    "href": "CHEATSHEET.html",
    "title": "",
    "section": "",
    "text": "All materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/Install_or_update_R_RStudio.html",
    "href": "notebooks/Install_or_update_R_RStudio.html",
    "title": "",
    "section": "",
    "text": "Have you installed R? Do you have the latest version?\nHave you installed RStudio? Do you have the latest version?\n\n\nYou need to have R as well as RStudio, a software application that makes R easier to use, installed on your computer.\n\n\nR is maintained by an international team of developers who make the language available through the web page of The Comprehensive R Archive Network. The top of the web page provides three links for downloading R. Follow the link that describes your operating system: Windows, Mac, or Linux.\n\n\n\nRStudio is an application like Microsoft Word—except that instead of helping you write in English, RStudio helps you write in R. The RStudio interface looks the same for Windows, Mac OS, and Linux. You can download RStudio for free. Click the “Download RStudio” button and follow the instructions that follow. Once you’ve installed RStudio, you can open it like any other program on your computer—usually by clicking an icon on your desktop.\n\n\nIf you already have R and RStudio installed, this is a good time to make sure your installations is current.\n\nCheck your current R version by opening RStudio and using the command below on the Console:\n\nR.version.string\n\nCheck your current RStudio version by opening RStudio and navigating through Help -> Check for updates:\n\n\n\nUpdate your R packages\n\nOpen RStudio and use the command below on the Console:\nupdate.packages(ask = FALSE, checkBuilt = TRUE)\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/On_the_day_create_Rmarkdown_make_commit_changes_using_RStudio.html",
    "href": "notebooks/On_the_day_create_Rmarkdown_make_commit_changes_using_RStudio.html",
    "title": "",
    "section": "",
    "text": "Make local changes, save, commit\n\nQuestions\n\nHow to use RStudio to push local changes to github?\n\n\n\n\nMake local changes, save, commit\nIn our project, we can perform to independent tasks.\n\nIn RStudio, click on the README.md file, and edit it e.g., by adding the line “This is a line from RStudio”. Save your changes.Commit these changes to your local repo.\n\nHow do you do that? In RStudio:\n\nClick the “Git” tab in upper right pane;\nCheck “Staged” box for README.md;\nIf you’re not already in the Git pop-up, click “Commit”;\nType a message in “Commit message”, such as “Commit from RStudio”;\nClick “Commit”.\n\n\n\nSince we primarily work with Rmarkdown files when using RStudio, we can try and repeat the above steps for a Rmarkdown file:\n\n\nIn RStudio File -> New File -> R Markdown;\nThe Rmarkdown file contains default code to generate some plots;\nOnce you create the new file, this change can be directly staged to the GitHub repo by repeating the above steps.\n\n\n\nPush your local changes online to GitHub\nClick the green arrow “Push” button to send your local changes to GitHub.\n\nIdeally you should not experience any issue when pushing the changes to the github server as you have previously done similar push from the command line.\nThe RStudio’s Git pane provides a specific subset of command line Git through its interface. So, if your credentials work in the shell, they should work in RStudio.\n\n\nConfirm the local change propagated to the GitHub remote\nGo back to the browser. I assume we’re still viewing your new GitHub repo.\nRefresh.\nYou should see the new “This is a line from RStudio” in the README and the new Rmarkdown file you have created within RStudio.\nIf you click on “commits”, you should see one with the message “Commit from RStudio”.\nIf you have made it this far, Congratulations! You have been successful in backing up changes on you local machine using RStudio to the GitHub server.\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/On_the_day_clone_the_repo_using_RStudio.html",
    "href": "notebooks/On_the_day_clone_the_repo_using_RStudio.html",
    "title": "",
    "section": "",
    "text": "Clone the test GitHub repository to your computer using RStudio\n\nQuestions\n\nAre you ready to check RStudio and github connectivity?\n\n\n\nIn RStudio, start a new Project:\n\nFile > New Project > Version Control > Git. In “Repository URL”, paste the URL of your new GitHub repository. It will be something like this https://github.com/Sydney-Informatics-Hub/myrepo_masterclass_RStudio_github.git.\nAccept the default project directory name, e.g. myrepo, which coincides with the GitHub repo name.\nKeep a note of where the Project will be saved locally.\nCheck “Open in new session”.\nClick “Create Project”.\nYou should find yourself in a new local RStudio Project that represents your test repo on GitHub. This should download the README.md file from GitHub. Look in RStudio’s file browser pane for the README.md file.\n\n\nAnd this is the new Git tab you should see next to your environment pane: \n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/On_the_day_create_a_test_repo.html",
    "href": "notebooks/On_the_day_create_a_test_repo.html",
    "title": "",
    "section": "",
    "text": "Create a new repository on GitHub\n\nQuestions\n\nAre you ready? Are all the pre-requisites satisfied?\n\n\n\n\nFor todays code-along session, you will need a test repository (or repo) on GitHub.\n\n\n* Click on the + symbol on the right hand top corner. * Select New repository\n\nPlease select the following options in the above form. * Repository template: No template. * Repository name: myrepo or any other name of your choice. * Description: “Repository for testing my Git/GitHub setup” or similar. * Choose Public. * Initialize this repository with: Add a README file. \nNow click the big green button that says \nCopy the clone URL to your clipboard. Since we have created a PAT for HTTPS protocol , copy the HTTPS URL as shown below.\n\nand type the following code on your terminal:\ngit clone https://github.com/YOUR-USERNAME/YOUR-REPOSITORY.git\n~/master_class % git clone https://github.com/Sydney-Informatics-Hub/myrepo_masterclass_RStudio_github.git \nCloning into 'myrepo_masterclass_RStudio_github'...\nUsername for 'https://github.com': nandan75\nPassword for 'https://nandan75@github.com': \nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Compressing objects: 100% (2/2), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (3/3), done.\nI have named my repo as `myrepo_masterclass_RStudio_github’ Please do a few checks with the local copy of the repos\nMake this new repo your working directory, list its files, display the README, and get some information on its connection to GitHub:\n\nMake this new repo your working directory cd myrepo_masterclass_RStudio_github\nlist all files ls\nDisplay the README head README.md\nGet some information on its connection to GitHub git remote show origin\n\n\nMake a local change, then commit, and push\nAdd a line to README and verify that git notices the change. Open the README file with a text editor and add some words like “I am adding a line in my local copy”. Then go back to your terminal and type the command below:\ngit status\nOn branch main\nYour branch is up to date with 'origin/main'.\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git restore <file>...\" to discard changes in working directory)\n    modified:   README.md\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")\nAdd the file with changes - README.md for commit step:\ngit add README.md\ngit commit -m \"A commit from my local computer\"`\n[main 306de6f] A commit from my local computer\n 1 file changed, 1 insertion(+)\n\nNote you always have to include a message with your commit.\n\nPush the changes to github git push.\nThe local changes should now be reflected into the README.md file on the github repo. Please check them.\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/Register_for_github_account.html",
    "href": "notebooks/Register_for_github_account.html",
    "title": "",
    "section": "",
    "text": "Do you have a github account?\n\n\nIf the answer to the above question is No, you will need to register for a free account with GitHub at https://github.com.   Start with your email address and follow the instructions.\n Here are a few tips which you can follow with reference to choosing a good username:\n\nYour actual name makes your username easier for people to guess or remember;\nA shorter name is better than a longer one;\nKeep it as unique as possible. GitHub auto-completes or suggests usernames in some settings;\nDo not use your current university, employer, place of residence or other information which is time-based and are likely to change in the future;\nUse lowercase characters:\nA good strategy for word separation is to use a hyphen -.\n\n\n\nGitHub offers free unlimited private repositories for all users. These free private repositories support up to three external collaborators, making them a perfect place for your personal projects, for job applications, and testing things out before making your project open source.\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/On_the_day_check_prerequisites.html",
    "href": "notebooks/On_the_day_check_prerequisites.html",
    "title": "",
    "section": "",
    "text": "A quick check of the pre-requisites\n\nQuestions\n\nHave you registered for a github account?\nHave you installed Git?\nHave you installed R? Do you have the latest version?\nHave you installed RStudio? Do you have the latest version?\n\n\n\nIf you can answer all of the above questions as YES, you are all set to go. Else please go back and refer to Set-up tabs or ask help to one of us. \nAs the first step you will need a test repository on GitHub. We will create a test repository and work with it for the purpose of this masterclass. Please click here or select Make a repo on github in the Git for version control drop-down (Top menu-bar).\n\nKey points\n\nFailures related to installations due to trivial (or not so trivial) problems are not uncommon - both due to an individuals operating system or even a the individuals computer!\nIf you have been unlucky, to be one of those who are stuck due to such installation/setup related issues, we can try to identify the problem(s) together.\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/Install_git.html",
    "href": "notebooks/Install_git.html",
    "title": "",
    "section": "",
    "text": "Have you installed Git on your system?\n\n\nGit is a free and open source distributed version control system designed to handle multiple versions of source code edits that are then transferred to files in a Git repository. GitHub serves as a location for uploading copies of a Git repository.\nYou need the Git tool to be installed on your laptop.\nTo check if git is installed, enter the following command in your command-line to request the path to your Git executable:\nwhich git\n## /usr/bin/git\nand Git version:\ngit --version\n## git version 2.39.1\nIf either/or both the command do not generate results similar to above,instead, you see something more like\ngit: command not found\nplease proceed to install git by following the instructions below.\n\n\n\n\n\n\nNote\n\n\n\nmacOS users might get an immediate offer to install command line developer tools. Yes, you should accept! Click Install and read more below.\n\n\n\n\nOption 1 (highly recommended): Install Git for Windows, also known as msysgit or Git Bash, to get Git in addition to some other useful tools, such as the Bash shell. Follow this link!\nThis option is recommended because Git for Windows leaves the Git executable in a conventional location, which will help you and other programs, e.g. RStudio, find it and use it. This also supports a transition to more expert use, because the ‘Git Bash’ shell will be useful as you venture outside of R/RStudio.\nNOTE: When asked about adjusting your PATH environment, make sure to select Git from the command line and also from 3rd-party software. Otherwise, we believe it is good to accept the defaults. Note that RStudio for Windows prefers for Git to be installed below C:/Program Files and this appears to be the default. This implies, for example, that the Git executable on my Windows system is found at C:/Program Files/Git/bin/git.exe. Unless you have specific reasons to otherwise, follow this convention.\nOption 2 (recommended): Install Git for Windows via the ‘Chocolatey’ package manager. Chocolatey is like apt-get or Homebrew, but for Windows instead of Debian/Ubuntu Linux or macOS. Using Chocolatey to install Git for Windows gives the same result as installing it yourself using ‘Option 1’.\nThis requires that you already have Chocolatey installed or that you are up for installing it. The instructions for installing Chocolatey are here. This may be worthwhile if it seems likely you will be installing more open source software in the future.\nAfter you install Chocolatey, in a shell (Appendix A), do:\nchoco install git.install\nThis installs the most current Git (Install) X.Y.Z Chocolatey package. At the time of writing, that is Git (Install) 2.33.1, but that version number will increment over time.\n\n\nIf you already have Git for Windows, but it’s not the latest version, it’s a good idea to update. Since v2.16, you can update like so from the command line:\ngit update-git-for-windows\n\n\n\n\nOption 1 (highly recommended): on your terminal, enter one of these commands to elicit an offer to install developer command line tools:\ngit --version\ngit config\nAccept the offer! Click on Install.\nHere’s another way to request this installation, more directly:\nxcode-select --install\nOption 2 (recommended): Install Git from here. This method will certainly get you the latest version of Git of all approaches described above. The GitHub home for the macOS installer is here. At that link, you can find more info if something goes wrong or you are working on an old version of macOS.\nOption 3: If you anticipate getting heavily into scientific computing, you’re going to be installing and updating lots of software. You should check out Homebrew, “the missing package manager for OS X”. Among many other things, it can install Git for you. Once you have Homebrew installed, do this in the shell:\nbrew install git\n\n\n\nInstall Git via your distro’s package manager.\nUbuntu or Debian Linux:\nsudo apt-get install git\nFedora or RedHat Linux:\nsudo yum install git\n Click here for a comprehensive list for various Linux and Unix package managers.\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/1.0_Learning_objectives.html",
    "href": "notebooks/1.0_Learning_objectives.html",
    "title": "",
    "section": "",
    "text": "Day 1 learning objectives\nToday, we will introduce you to the first steps of analysing RNA sequencing (RNA-seq) data using the command line. We will learn about the pre-processing workflow we use to convert raw sequence reads to analysis-ready count data.\n\nIntroductory slides\n\nUnderstand how RNA-seq data is generated\nReview the applications of RNA-seq\nUnderstand experimental design considerations for differential expression (DE) analysis\nUnderstand the basic RNA-seq DE analysis workflow\n\n\n\nRun the nf-core/rnaseq pipeline\n\nSet up your computer for this workshop series\nLog in to your Nimbus instance\nDownload the input data files\nRun the nf-core/rnaseq command to excecute the pipeline\n\n\n\nWhy use nf-core workflows?\n\nUnderstand why Nextflow and nf-core are good options for reproducible and portable bioinformatics workflows\n\n\n\nThe ins and outs of nf-core-rnaseq\n\nWrite and run a basic nf-core/rnaseq command to perform RNA-seq data pre-processing\nUnderstand what input files and parameters are required to run the command\nReview the output files generated by the nf-core/rnaseq pipeline\nUnderstand how to adjust the run command to customise the workflow\n\n\n\nThe RNAseq pre-processing workflow\n\nUnderstand the different steps in a typical RNA-seq pre-processing pipeline\nEvaluate the results and outputs generated by the nf-core/rnaseq pipeline\nUnderstand how to perform quality checking of raw sequence data\nUnderstand the requirements for trimming raw RNA-seq reads\nUnderstand the process of aligning RNA-seq reads to a reference genome\nUnderstand how read alignments are converted to gene count data\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/about.html",
    "href": "notebooks/about.html",
    "title": "",
    "section": "",
    "text": "About this series\nThis training was developed under the Australian BioCommons ‘Bring Your Own Data’ - Command Line Interface (CLI) Platform Expansion Project by the Sydney Informatics Hub, in partnership with Pawsey Supercomputing Centre, Queensland Cyberinfrastructure Foundation (QCIF) and Australian Academic Research Network (AARNet). This project aims to create highly accessible, highly available, highly scalable analysis and data sharing capabilities for the benefit of life science researchers nationally.\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/Connections.html",
    "href": "notebooks/Connections.html",
    "title": "",
    "section": "",
    "text": "Can you connect git and a remote git server such as github?\n\n\nYou need to confirm that you can clone a repository from GitHub and establish two-way communications between the local git and the github - This is called pull and push.\nWhen communicating with a remote server, git has two available protocols - HTTPS and SSH - each of which requires different credentials.\nWe will discuss how you can setup your credentials for the HTTPs protocol.\n\n\nPersonal access token (PAT) is required by a remote git server such as github to confirm a users credentials.\n\nPlease note that from 2021-08-13 GitHub is no longer accepting account passwords when authenticating Git operations. You need to add a PAT (Personal Access Token) instead, and you can follow the below method to add a PAT on your system.\n\n\n\nStep 1 - Open GitHub and log in with your credentials.\nStep 2 - Click on the Setting menu.\nStep 3 - From the Setting menu click on Developer Settings\nStep 4 - From the Developer Settings menu, click on Personal access token\nStep 5 - From the Personal access token, click on the Generate new Token button.\nStep 6 - Now fill up required details (select “repo”, “user”, and “workflow”). And then click on the Generate Token button.\nStep 7 - After that, a new token has been generated. Copy that generated token and use this token to access Git with username and token. It will be something like ghp_sFhFsSHhTzMDreGRLjmks4Tzuzgthdvfsrta.\nYou will need it the next time when a git operation asks for your password.\nNow follow the below method based on your machine:\n\n\nOpen Control Panel → User Accounts → Manage your credentials → Windows Credentials.\nIt will show all generic credentials. Find your GitHub URL and click on that. Now click on the edit button. And then add the personal access token generated from GitHub into the password field. And click on the Save button.\nIf you don’t find git:https://github.com → Click on Add a generic credential → Internet address will be git:https://github.com and you need to type in your username and password will be your GitHub Personal Access Token → Click Ok\n\n\n\nClick on the Spotlight icon (magnifying glass) on the right side of the menu bar. Type Keychain access then press the Enter key to launch the app → In Keychain Access, search for github.com → Find the internet password entry for github.com → Edit or delete the entry accordingly\n\n\n\nFor Linux, you need to configure the local GIT client with a username and email address:\n$ git config --global user.name \"your_github_username\" \n$ git config --global user.email \"your_github_email\" \n$ git config -l\n\n\n\n\nIf you’re a new GitHub user and using HTTPS, you might be asked for your username and password. Note Use you PAT and not your login password.\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  },
  {
    "objectID": "notebooks/Running_nfcore-rnaseq_command_details.html",
    "href": "notebooks/Running_nfcore-rnaseq_command_details.html",
    "title": "",
    "section": "",
    "text": "Run the nf-core/rnaseq pipeline on Pawsey’s Nimbus VM instance\n\nQuestions\n\nWhat does the actual nf-core/rnaseq command look like?\nWhat are the main input parameters?\nWhat are the outputs?\nWhat are the output log files?\n\n\n\nObjectives\n\nUnderstand and excecute the nf-core/rnaseq command\n\n\n\nRun the pipeline on Pawsey-Nimbus VM instance\n\nPlease go back to the command-line(Terminal) window on which you have logged on to the Nimbus training instance.\nIn case the window has been closed accidently or if you have been logged-off, you will need to follow the log-in steps on the Setup page.\n\nCheck your path by typing:\npwd\n\nYou should be in the path: /home/training/base_directory/working_directory\nIf you are not, move into the above path by typing:\n\ncd /home/training/base_directory/working_directory\n\nExcecuting the Nextflow nf-core/rnaseq pipeline\nWe will run the single nf-core/rnaseq command using a utility called screen in unix.\nWhat is the screen command?\n\nThe screen command in Linux provides the ability to launch and use multiple shell sessions from a single ssh session.\nWhen a process is started with ‘screen’, the process can be detached from session & then can reattach the session at a later time.\nWhen the session is detached, the process that was originally started from the screen is still running and managed by the screen itself.\nThe process can then re-attach the session at a later time, and the terminals are still there, the way it was left.\nIn short, we can use a single Terminal and multiple screen sessions in the terminal to do multiple different things.  NOTE If this sounds too complicated, the other alternative is to open a new terminal window :-) for a new task.\n\n\n\n(1) Start a new screen window\n-S: It will start a new window within the screen and also gives a name to the window. It creates a session which is identified by that name. The name can be used to reattach screen at a later stage.\nscreen -S run_nextflow_in_screen\n\n\n(2) Run the nf-core/rnaseq command\n\n\ncvmfs_path=/cvmfs/data.biocommons.aarnet.edu.au/Final_resources_250722\n  \nnextflow run $cvmfs_path/nfcore_pipeline/rnaseq/ \\                                    # the excecutable file\n    --input samplesheet.csv \\                                                         # samplesheet file-name\n    -profile singularity \\                                                            # profile e.g. singularity\n    --fasta $cvmfs_path/Mouse_chr18_reference/chr18.fa \\                              # Path: Genome fasta file\n    --gtf $cvmfs_path/Mouse_chr18_reference/chr_18_startOfLine.gtf \\                  # path: gtf file\n    --star_index $cvmfs_path/Mouse_chr18_reference/chr18_STAR_singularity_index/ \\    # path: 'STAR' index file\n    --max_memory '6 GB' --max_cpus 2 \\                                                # memory and cpu resources \n    --outdir results \\\n    -with-report excecution_report.html \\                                             # Excecution log file-name \n    -with-timeline timeline_report.html                                               # Timeline log file-name\n\n\nThe CernVM File System i.e. cvmfs provides a scalable, reliable and low-maintenance software distribution service.\nThe names of cvmfs folders (e.g. Final_resources_250722) and files need to be standardised (make these more user-friendly). This is work in progress.\n\n\n\n(3) Detach from the above screen session\n-d: It is used to detach a screen session so that it can be reattached in future. It can also be done with the help of shortcut key Ctrl-a + d\n\n\n(4) Reattach the screen-session to check the progress\n-r : It is used to reattach a screen session which was detached in past.\nscreen -r run_nextflow_in_screen\nRepeat Steps (3) and (4) to check the the excecution status of the command.\n\nThe nf-core/rnaseq command will take about 18-22 minutes to run to completion.\nIn the mean time we will proceed to discuss some of the important output and log files.\nWe plan to make a pre-processed results folder available for download. If one of more attendess have a problem excecuting the nf-core command, they will be able use these pre-computed results.\n\nAn scp command to transfer required files from the results folder on the VM instance to your local machine will also be made available.\n\n\n\n\nChallenge\n\nWhich parameters in the above nf-core/rnaseq command seem to be mandatory? NOTE This is a trick question , but a very important one 😏\n\n\n\nSolution\n\n\nIf we are working with model organisms such as human/mouse\n\nThe ONLY mandatory parameters which the user needs to supply to the pipeline are\n\nThe samplesheet : --input samplesheet.csv\nThe name of the genome version e.g. --genome GRCh37\nThe profile ‘-profile’\n\nSo the most basic command (when a standard genome is available from a nf-core resource) is\n\n\nnextflow run nf-core/rnaseq \\\n    --input samplesheet.csv \\\n    --outdir <OUTDIR> \\\n    --genome GRCh37 \\\n    -profile <docker/singularity/podman/shifter/charliecloud/conda/institute>\n\nProvided with a genome ID such as --genome GRCh37, the nf-core/rnaseq pipeline will download all requried genome-related files at run-time.\nHowever when we are working with our own non-model species of interest, we will need to provide the genome related index files.\nIn this workshop, although we are working with a standard version of the mouse genome (GRCh38/mm10) , inorder to save time, bandwidth and hard-disk space on the individial VM instances, we have hosted the genome files in a central repository called Cern-VM-FS, and hence provided the cvmfs paths.\n\n\n\n\nKey points\n\nPawsey Nimbus VM is a good resource to run nf-core piplelines\n\n\n\n\n\n\nAll materials copyright Sydney Informatics Hub, University of Sydney"
  }
]